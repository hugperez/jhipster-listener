package com.mycompany.myapp.domain;

import static com.mycompany.myapp.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class EntityHistoryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntityHistoryAllPropertiesEquals(EntityHistory expected, EntityHistory actual) {
        assertEntityHistoryAutoGeneratedPropertiesEquals(expected, actual);
        assertEntityHistoryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntityHistoryAllUpdatablePropertiesEquals(EntityHistory expected, EntityHistory actual) {
        assertEntityHistoryUpdatableFieldsEquals(expected, actual);
        assertEntityHistoryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntityHistoryAutoGeneratedPropertiesEquals(EntityHistory expected, EntityHistory actual) {
        assertThat(expected)
            .as("Verify EntityHistory auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntityHistoryUpdatableFieldsEquals(EntityHistory expected, EntityHistory actual) {
        assertThat(expected)
            .as("Verify EntityHistory relevant properties")
            .satisfies(e -> assertThat(e.getUserLogin()).as("check userLogin").isEqualTo(actual.getUserLogin()))
            .satisfies(e -> assertThat(e.getEntityName()).as("check entityName").isEqualTo(actual.getEntityName()))
            .satisfies(e -> assertThat(e.getEntityId()).as("check entityId").isEqualTo(actual.getEntityId()))
            .satisfies(e -> assertThat(e.getActionType()).as("check actionType").isEqualTo(actual.getActionType()))
            .satisfies(e -> assertThat(e.getContent()).as("check content").isEqualTo(actual.getContent()))
            .satisfies(e ->
                assertThat(e.getContentContentType()).as("check content contenty type").isEqualTo(actual.getContentContentType())
            )
            .satisfies(e ->
                assertThat(e.getCreationDate())
                    .as("check creationDate")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(actual.getCreationDate())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEntityHistoryUpdatableRelationshipsEquals(EntityHistory expected, EntityHistory actual) {
        // empty method
    }
}
